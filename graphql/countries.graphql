
"Account of a person who utilizes this application."
type Country {
    id:ID!
    name:String!
    region_id:Int
    status:Int
    users:[User] @hasMany
    paginated_users(orderBy: [OrderByClause!]! @orderBy):[User] @hasMany (type: "paginator")
    createdBy:User @belongsTo
    updatedBy:User @belongsTo
    deletedBy:User @belongsTo
    created_at: DateTime
    updated_at: DateTime
    deleted_at:DateTime
    region: Region @belongsTo
    states(orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["name"])):[State] @hasMany (type: "paginator")
    country_states:[State] @hasMany
}

extend type Query {
    "Find a single user by an identifying attribute."
    country(
      "Search by primary key."
      id: ID @eq
    ): Country @find

    all_countries: [Country!]! @all @orderBy(column: "name", direction: ASC)

    countries(
        orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["name"])
    ): [Country!]! @paginate(defaultCount: 10)
}
extend type Mutation {
    createCountry(name: String!,status: Int!,region_id: Int): Country! @create  @guard @inject(context:"user.id",name:"created_by")  
    updateCountry(id: ID!,name: String,status: Int!,region_id: Int): Country! @update @guard @inject(context:"user.id",name:"updated_by")
    deleteCountry(id: ID!): Country! @guard @delete @inject(context:"user.id",name:"deleted_by")
}