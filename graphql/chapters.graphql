
"Account of a person who utilizes this application."
type Chapter {
    id:ID!
    city: City @belongsTo
    state: State @belongsTo
    country: Country @belongsTo
    region: Region @belongsTo
    detail:String
    user_type:Int
    region_id:Int
    name:String  
    user_id:Int
    user:User @belongsTo
    is_approved_by_admin:Int
    petition_no:String
    is_approved:Int
    is_approved_commissioner:Int
    is_approved_board_member:Int
    createdBy:User @belongsTo
    updatedBy:User @belongsTo
    deletedBy:User @belongsTo
    created_at: DateTime
    updated_at: DateTime
    deleted_at:DateTime
    all_countries: [Country] @hasMany
    countries(orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["name"])):[Country] @belongsToMany (type: "paginator")
    endorsements(orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["id"])):[ChapterEndorsement] @belongsToMany (type: "paginator")
    notIncluded: [Country] @method(name:"not_included_countries")
}

extend type Query {
    "Find a single user by an identifying attribute."
    chapter(
      "Search by primary key."
      id: ID @eq
    ): Chapter @Find

    all_chapters: [Chapter!]! @all

    chapters(
        orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["name","is_approved_by_admin"])
    ): [Chapter!]! @paginate(defaultCount: 10)
}
extend type Mutation {
    createChapter(
        city_id:Int
        name:String
        state_id:Int
        region_id:Int
        user_id:Int
        user_type:Int
        is_approved_by_admin:Int
        country_id:Int
        detail:String
        petition_no:String
        is_approved:Int
        is_approved_commissioner:Int
        is_approved_board_member:Int
    ): Chapter! @create  @guard @inject(context:"user.id",name:"created_by")
    updateChapter(
        id: ID!
        city_id:Int
        name:String
        state_id:Int
        country_id:Int
        user_type:Int
        region_id:Int
        user_id:Int
        is_approved_by_admin:Int
        detail:String
        petition_no:String
        is_approved:Int
        is_approved_commissioner:Int
        is_approved_board_member:Int
    ): Chapter! @update @guard @inject(context:"user.id",name:"updated_by")
    deleteChapter(id: ID!): Chapter! @guard @delete @inject(context:"user.id",name:"deleted_by")

    sendChapterMail(chapter_id:Int): String @guard @field(resolver:"App\\GraphQL\\Mutations\\Chapters\\sendChapterMail")

    
}
