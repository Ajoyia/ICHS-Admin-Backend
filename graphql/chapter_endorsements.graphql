
"Account of a person who utilizes this application."
type ChapterEndorsement {
    id:ID!
    user_id: Int
    user: User @belongsTo
    chapter_id: Int
    chapter: Chapter @belongsTo
    is_email_sent:Int
    email_sent_date:DateTime
    is_endorsed:Int
    createdBy:User @belongsTo
    updatedBy:User @belongsTo
    deletedBy:User @belongsTo
    created_at: DateTime
    updated_at: DateTime
    deleted_at:DateTime
}

extend type Query {
    "Find a single user by an identifying attribute."
    chapter_endorsement(
      "Search by primary key."
      id: ID @eq
    ): Chapter @Find

    all_chapter_endorsements: [ChapterEndorsement!]! @all

    chapter_endorsements(
        orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["name","is_approved_by_admin"])
    ): [Chapter!]! @paginate(defaultCount: 10)
}
extend type Mutation {
    createChapterEndorsement(
        user_id: [Int]
        chapter_id: Int
    ):  String @guard @field(resolver:"App\\GraphQL\\Mutations\\ChapterEndorsements\\createChapterEndorsement") @inject(context:"user.id",name:"created_by")
    updateChapterEndorsement(
        id: ID!
        user_id: Int
        chapter_id: Int
        is_email_sent:Int
        email_sent_date:DateTime
        is_endorsed:Int
        endorsed_date:DateTime

    ): ChapterEndorsement! @update @guard @inject(context:"user.id",name:"updated_by")

    endorseChapter(
        chapter_id: Int
    ): String @field(resolver:"App\\GraphQL\\Mutations\\ChapterEndorsements\\endorseChapter")

    sendUserEndorsementMail(user_id:[Int],chapter_id:Int): String @guard @field(resolver:"App\\GraphQL\\Mutations\\ChapterEndorsements\\sendMail")
    deleteChapterEndorsement(id: ID!): ChapterEndorsement! @guard @delete @inject(context:"user.id",name:"deleted_by")
    
}
