
type CMESessionSpeaker {
    "Unique primary key."
    id: ID!
    role_id: Int
    role:CMESpeakerRole @belongsTo
    cme_speakers_id: Int
    speaker:CMESpeaker @belongsTo
    model_type: String
    model_id: Int
    cme_application_id: Int
    createdBy:User @belongsTo
    updatedBy:User @belongsTo
    deletedBy:User @belongsTo
    created_at: DateTime
    updated_at: DateTime
    deleted_at:DateTime
}

extend type Query {
    "Find a single user by an identifying attribute."
    cme_session_speaker(
      "Search by primary key."
      id: ID @eq
    ): CMESessionSpeaker @find

    all_cme_session_speakers: [CMESessionSpeaker!]! @all

    cme_session_speakers(
        orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["name"])
    ): [CMESessionSpeaker!]! @paginate(defaultCount: 10)
}
extend type Mutation {
    createCMESessionSpeaker(
        role_id: Int
        cme_speakers_id: Int
        model_type: String
        model_id: Int
        cme_application_id: Int): String @guard @field(resolver:"App\\GraphQL\\Mutations\\CMESessionSpeakers\\CreateCMESessionSpeaker") @inject(context:"user.id",name:"created_by")

    createCMELectureSpeaker(
        role_id: Int
        cme_speakers_id: Int
        model_type: String
        model_id: Int
        cme_application_id: Int): String @guard @field(resolver:"App\\GraphQL\\Mutations\\CMELectureSpeakers\\CreateCMELectureSpeaker") @inject(context:"user.id",name:"created_by")

    deleteCMESessionSpeaker(id: ID!): CMESessionSpeaker! @delete @guard @inject(context:"user.id",name:"deleted_by")

    updateCMESessionSpeaker(
        id: ID!
        role_id: Int
        cme_speakers_id: Int
       ): CMESessionSpeaker! @update @guard @inject(context:"user.id",name:"updated_by")
}
