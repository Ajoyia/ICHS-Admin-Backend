"Account of a person who utilizes this application."
type Specialty {
    "Unique primary key."
    id: ID
    name: String
    parent_id: Int
    specialty: Specialty @belongsTo
    parent: Specialty @belongsTo
    sub_specialties: Specialty @belongsTo
    children: [Specialty] @hasMany
    child: [Specialty]
}

type NewSpecialty {
    "Unique primary key."
    id: String
    ids: String
    name: String
    parent_id: Int
    specialty: NewSpecialty @belongsTo
    parent: NewSpecialty @belongsTo
    sub_specialties: NewSpecialty @belongsTo
    children: [NewSpecialty] @hasMany
    child: [NewSpecialty]
}

extend type Query {
    "Find a single user by an identifying attribute."
    specialty("Search by primary key." id: ID @eq): Specialty @find

    ancestor_speciality(parent_id: Int @where(key: "parent_id")): [Specialty!]!
        @all

    parent_speciality(parent_id: [String] @in(key: "parent_id")): [Specialty!]!
        @all
    all_parents:[Specialty!]!
        @field(
            resolver: "App\\GraphQL\\Queries\\Specialities\\GetParents"
        )
    all_specialties: [Specialty!]! @all
    specialties(
        orderBy: [OrderByClause!]! @orderBy
        where: _ @whereConditions(columns: ["name"])
    ): [Specialty!]! @paginate(defaultCount: 10)

    getAllSpecialty: [NewSpecialty]
        @field(resolver: "App\\GraphQL\\Queries\\AllSpecialty")
}
extend type Mutation {
    createSpecialty(name: String!, parent_id: String): String
        @guard
        @field(
            resolver: "App\\GraphQL\\Mutations\\Specialties\\CreateSpecialty"
        )
    deleteSpecialty(id: ID!): String
        @guard
        @field(
            resolver: "App\\GraphQL\\Mutations\\Specialties\\DeleteSpecialty"
        )
    updateSpecialty(id: ID!, name: String, parent_id: String): String
        @guard
        @field(
            resolver: "App\\GraphQL\\Mutations\\Specialties\\UpdateSpecialty"
        )
}
