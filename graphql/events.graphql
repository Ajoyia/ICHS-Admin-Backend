"Account of a person who utilizes this application."
type Events {
    "Unique primary key."
    id: ID!
    title: String
    image: String
    link: String
    date: String
    location: String
    cme_points: String
    recent_flag: Int
    upcoming_flag: Int
    order:Int
    createdBy: User @belongsTo
    updatedBy: User @belongsTo
    deletedBy: User @belongsTo
    created_at: DateTime
    deleted_at: DateTime
    updated_at: DateTime
}

extend type Query {
    "Find a single user by an identifying attribute."
    event(
      "Search by primary key."
      id: ID @eq
    ): Events @find

    all_events: [Events!]! @all @orderBy(column: "order", direction: ASC)

    upcoming_events(
      "Search by primary key."
      upcoming_flag: Int @eq
    ): [Events!]! @all @orderBy(column: "order", direction: ASC)

    events(
        orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["title"])
    ): [Events!]! @paginate(defaultCount: 10)
}

extend type Mutation {
    createEvent(
        title: String
        image: Upload
        link: String
        date: String
        location: String
        cme_points: String
        recent_flag: Int
        upcoming_flag: Int
        order:Int
    ): Events @field(resolver: "App\\GraphQL\\Mutations\\Events\\Create")

    updateEvents(
        id: ID!
        title: String
        image: Upload
        link: String
        date: String
        location: String
        cme_points: String
        recent_flag: Int
        upcoming_flag: Int
        order:Int
    ): Events @guard @field(resolver: "App\\GraphQL\\Mutations\\Events\\Update")
    
    deleteEvents(id: ID!): Events
        @delete
        @guard
        @inject(context: "user.id", name: "deleted_by")
}


