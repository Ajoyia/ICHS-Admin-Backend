type RoleHourse{
    id:ID!
    name:String
    hourse:Int
    type:String
    validity:Int
    expire_on:Date
    status:Int
    users:[User!] @hasMany
    createdBy:User @belongsTo
    updatedBy:User @belongsTo
    deletedBy:User @belongsTo
    created_at: DateTime
    updated_at: DateTime
    deleted_at:DateTime
}

extend type Query{
    roleHourse(
      "Search by primary key."
      id: ID @eq
    ): RoleHourse @find

    allRoleHourses: [RoleHourse!]! @all

    roleHourses(
        orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["name","hourse","type","validity"])
    ): [RoleHourse!]! @guard @paginate(defaultCount: 10)
}

extend type Mutation{
    createRoleHourse(
        name:String
        hourse:Int
        type:String
        validity:Int
        expire_on:Date
        status:Int
    ): RoleHourse @guard @create @inject(context:"user.id",name:"created_by")

    deleteRoleHourse(id: ID!): RoleHourse! @delete  @guard  @inject(context:"user.id",name:"deleted_by")

    updateRoleHourse(
        id: ID!
        name:String
        hourse:Int
        type:String
        validity:Int
        expire_on:Date
        status:Int
    ): RoleHourse! @guard @update @inject(context:"user.id",name:"updated_by")
}
