type Volunteer {
    id:ID!
    region:Region @belongsTo
    chapter_id:Int
    status: Int
    policy_id:Int
    is_approved:Int
    createdBy:User @belongsTo
    user_id:Int
    policy:Policy @belongsTo
    user:User @belongsTo
    chapter:Chapter @belongsTo
    volunteerType:VolunteerType @belongsTo
    updatedBy:User @belongsTo
    deletedBy:User @belongsTo
    created_at: DateTime
    updated_at: DateTime
    deleted_at:DateTime
}

extend type Query {
    "Find a single user by an identifying attribute."
    Volunteer(
      "Search by primary key."
      id: ID @eq
    ): Volunteer @Find

    all_Volunteers: [Volunteer!]! @all

    Volunteers(
        orderBy: [OrderByClause!]! @orderBy,
        where:_@whereConditions(columns:["user"], handler: "App\\Volunteers")
    ): [Volunteer!]! @paginate(defaultCount: 10)
}
extend type Mutation {
    createVolunteer(
        region_id:Int
        chapter_id:Int
        volunteer_type_id:Int
        policy_id:Int
        status: Int
        is_approved:Int
        user_id:Int

    ): Volunteer! @create @guard @inject(context:"user.id",name:"created_by")
    updateVolunteer(
        id: ID!
        region_id:Int
        chapter_id:Int
        volunteer_type_id:Int
        policy_id:Int
        status: Int
        is_approved:Int
        user_id:Int
    ): Volunteer! @guard @inject(context:"user.id",name:"updated_by") @field(resolver:"App\\GraphQL\\Mutations\\Volunteers\\UpdateVolunteer")
    deleteVolunteer(id: ID!): Volunteer! @guard @delete @inject(context:"user.id",name:"deleted_by")
}
